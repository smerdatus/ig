{"version":3,"sources":["assets/shannon_lawson_13292549_1635943943294813_212947795_n.mp4","NewPerson.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewPerson","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","state","video","setState","oldY","document","documentElement","scrollTop","window","pageYOffset","body","refs","player","load","scrollTo","play","scrollBackDown","video_0","_this2","react_default","a","createElement","style","display","alignItems","flexDirection","padding","lib","ref","loop","fluid","width","src","onClick","className","flexWrap","justifyContent","Component","App","renderButtons","person","paddingBottom","NewPerson_NewPerson","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4abbc0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shannon_lawson_13292549_1635943943294813_212947795_n.2957d6be.mp4\";","import React, { Component } from 'react';\nimport { Player } from 'video-react';\nimport './App.css';\nimport video_0 from './assets/shannon_lawson_13292549_1635943943294813_212947795_n.mp4';\n\nexport default class NewPerson extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: video_0,\n      oldY: 0\n    };\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (this.state.video !== prevState.video) {\n      this.setState({oldY: document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop});\n      this.refs.player.load();\n      window.scrollTo(0, 0);\n      this.refs.player.play();\n    }\n  }\n\n  scrollBackDown = () => {\n    window.scrollTo(0, this.state.oldY);\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n          <div style={{padding: '1vh'}}>\n            <Player ref=\"player\" loop fluid={false} width={350}>\n              <source src={this.state.video} />\n            </Player>\n        </div>\n        {this.state.oldY === 0 ? '' : (\n          <div padding={{padding: '2vh'}} onClick={() => this.scrollBackDown()} >\n            <button className=\"pure-button pure-button-primary\">Return to previous position</button>\n        </div>\n        )}\n      </div>\n      <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center'}}>\n        TODO\n      </div>\n    </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport NewPerson from './NewPerson';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      person: 'hide'\n    };\n  }\n\n  renderButtons = () => {\n    return (\n      <div style={{display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap', padding: 20}}>\n        <div onClick={() => this.setState({person: 'hide'})} style={{paddingBottom: 10}}>\n          <button className=\"pure-button pure-button-primary\">Hide</button>\n        </div>\n        <div onClick={() => this.setState({person: 'new'})} style={{paddingBottom: 10}}>\n          <button className=\"pure-button pure-button-primary\">new</button>\n        </div>\n      </div>\n      );\n  }\n\n  render() {\n    if (this.state.person === 'hide') {\n      return (\n      <div>\n        {this.renderButtons()}\n      </div>\n      )\n    } else if (this.state.person === 'new') {\n      return (\n        <div>\n          {this.renderButtons()}\n          <NewPerson />\n        </div>\n      );\n    } else {\n      return (\n        <div>Error</div>\n      )\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}